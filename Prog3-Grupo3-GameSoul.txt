Parcial II - Grupo 3 - GameSoul

npm init -y

npm i express dotenv sequelize mysql2
npm i sequelize-cli --D

Crear:
- .gitignore -> /Node_Modules/
- .env
- .sequelizerc

--------------------- .ENV ----------------------------

DB_USERNAME=root
DB_PASSWORD=
DB_HOST=localhost
DB_DATABASE=grupo3_gamesoul
DB_PORT=3306
DB_DIALECT=mysql

-------------------- .SEQUELIZERC ----------------------

const path = require('path')
module.exports = {
config: path.resolve('./src/database/config', 'config.js'),
'models-path': path.resolve('./src/database/models'),
'seeders-path': path.resolve('./src/database/seeders'),
'migrations-path': path.resolve('./src/database/migrations'),
}

------------------------------------------------------------

En la terminal:

git init
git remote add origin https://github.com/CinRigoni/Grupo3_GameSoul.git
git branch -M main
git add .
git commit -m"Primer commit"
git push -u origin main

------------------------------------------------------------

Dentro de src/database
sequelize-cli init

------------------------- CONFIG:JS --------------------------

require('dotenv').config()
module.exports = {

  username: process.env.DB_USERNAME,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  dialect: process.env.DB_DIALECT

}

--------------------------------------------------------------

Cambiar en models/index.js -> donde dice config.json por config.js

----------------- SENTENCIAS GENERATE -----------------

sequelize model:generate --name Artist --attributes name:string

sequelize model:generate --name Category --attributes name:string

sequelize model:generate --name Visibility --attributes name:string

sequelize model:generate --name RecordCompany --attributes name:string

sequelize model:generate --name Product --attributes name:string,price:decimal,stock:integer,stockMin:integer,stockMax:integer,description:string,year:integer,categoriesId:integer,visibilitiesId:integer,artistsId:integer,recordCompaniesId:integer

sequelize model:generate --name Image --attributes name:string,productsId:integer

sequelize model:generate --name Rol --attributes name:string

sequelize model:generate --name User --attributes firstName:string,lastName:string,username:string,email:string,password:string,avatar:string,phoneNumber:integer,rolesId:integer

sequelize model:generate --name Address --attributes street:string,number:integer,floor:integer,apartment:string,zipCode:string,city:string,province:string,country:string,usersId:integer

sequelize model:generate --name Status --attributes name:string

sequelize model:generate --name Payment --attributes name:string,monthlyFees:integer

sequelize model:generate --name Order --attributes number:integer,date:date,total:decimal,usersId:integer,statussesId:integer,paymentsId:integer

sequelize model:generate --name Shipping --attributes price:decimal,street:string,number:integer,floor:integer,apartment:string,zipCode:string,city:string,province:string,country:string,phoneNumber:integer,ordersId:integer

sequelize model:generate --name OrderDetail --attributes quantity:decimal,subtotal:decimal,ordersId:integer,productsId:integer

------------------------ REFERENCES ---------------------------

//Artist -> No
//Category -> No
//Visibility -> No
//RecordCompanies -> No

//Product
-categories
references:{
          model: 'categories',
          key: 'id'
        }
-visibilities
references:{
          model: 'visibilities',
          key: 'id'
        }
-artists
references:{
          model: 'artists',
          key: 'id'
        }
-recordCompanies
references:{
          model: 'recordcompanies',
          key: 'id'
        }

//Image
-products
references:{
          model: 'products',
          key: 'id'
        }

//Rol -> No

//User
-roles
references:{
          model: 'rols',
          key: 'id'
        }

//Address
-users
references:{
          model: 'users',
          key: 'id'
        }

//Status -> No
//Payment -> No

//Order
-users
references:{
          model: 'users',
          key: 'id'
        }
-statusses
references:{
          model: 'statuses',
          key: 'id'
        }
-payments
references:{
          model: 'payments',
          key: 'id'
        }

//Shipping
-orders
references:{
          model: 'orders',
          key: 'id'
        }

//OrderDetail
-orders
references:{
          model: 'orders',
          key: 'id'
        }
-products
references:{
          model: 'products',
          key: 'id'
        }

------------------------ RELACIONES ---------------------------

//Relación User-Address (OneToOne)

User.hasOne(models.Address, {
	foreignKey: 'usersId'
})
Address.belongsTo(models.User, {
	foreignKey: 'usersId'
})

//Relación Rol-User (OneToOne)

Rol.hasOne(models.User, {
	foreignKey: 'rolesId'
})
User.belongsTo(models.Rol, {
	foreignKey: 'rolesId'
})

//Relación Order-User (OneToMany)

User.hasMany(models.Order, {
	foreignKey: 'usersId'
})
Order.belongsTo(models.User, {
	foreignKey: 'usersId'
})

//Relación Payment-Order (OneToOne)

Payment.hasOne(models.Order, {
	foreignKey: 'paymentsId'
})
Order.belongsTo(models.Payment, {
	foreignKey: 'paymentsId'
})

//Relación Status-Order (OneToOne)

Status.hasOne(models.Order, {
	foreignKey: 'statussesId'
})
Order.belongsTo(models.Status, {
	foreignKey: 'statussesId'
})

//Relación Shipping-Order (OneToOne)

Order.hasOne(models.Shipping, {
	foreignKey: 'ordersId'
})
Shipping.belongsTo(models.Order, {
	foreignKey: 'ordersId'
})

//Relación Order-OrderDetail (OneToMany)

Order.hasMany(models.OrderDetail, {
	foreignKey: 'ordersId'
})
OrderDetail.belongsTo(models.Order, {
	foreignKey: 'ordersId'
})

//Relación Artist-Product (OneToMany)

Artist.hasMany(models.Product, {
	foreignKey: 'artistsId'
})
Product.belongsTo(models.Artist, {
	foreignKey: 'artistsId'
})

//Relación Category-Product (OneToMany)

Category.hasMany(models.Product, {
	foreignKey: 'categoriesId'
})
Product.belongsTo(models.Category, {
	foreignKey: 'categoriesId'
})

//Relación RecordCompany-Product (OneToMany)

RecordCompany.hasMany(models.Product, {
	foreignKey: 'recordCompaniesId'
})
Product.belongsTo(models.RecordCompany, {
	foreignKey: 'recordCompaniesId'
})

//Relación Visibility-Product (OneToMany)

Visibility.hasMany(models.Product, {
	foreignKey: 'visibilitiesId'
})
Product.belongsTo(models.Visibility, {
	foreignKey: 'visibilitiesId'
})

//Relación Product-Image (OneToMany)

Product.hasMany(models.Image, {
	foreignKey: 'productsId'
})
Image.belongsTo(models.Product, {
	foreignKey: 'productsId'
})

//Relación Product-OrderDetail

Product.hasMany(models.OrderDetail, {
	foreignKey: 'ordersId'
})
OrderDetail.belongsTo(models.Product, {
	foreignKey: 'ordersId'
})
